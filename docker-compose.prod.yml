services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api
    restart: unless-stopped
    networks:
      - sdlc_agents_network

  # Next.js Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
      target: runner
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://yourdomain.com/api/v1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - sdlc_agents_network

  # FastAPI Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@postgres:5432/sdlc_agents
      - DB_POOL_SIZE=20
      - DB_MAX_OVERFLOW=40
      
      # Security Configuration
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      
      # Claude AI Configuration
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - CLAUDE_PERMISSION_MODE=bypassPermissions
      - CLAUDE_REQUEST_TIMEOUT=300
      
      # Application Configuration
      - PROJECT_NAME=SDLC Agents API
      - VERSION=1.0.0
      - API_V1_STR=/api/v1
      - DEBUG=false
      - ENVIRONMENT=production
      - PORT=8001
      
      # CORS Configuration
      - CORS_ORIGINS=https://yourdomain.com
      
      # Workspace Configuration
      - AGENTS_DIR=/app/workspaces
      - PROJECTS_DIR=/app/projects
      
      # Documentation Configuration
      - ENABLE_DOCS=false
      - ENABLE_REDOC=false
      
      # Logging Configuration
      - LOG_LEVEL=INFO
      - LOG_FORMAT=json
      
      # Monitoring Configuration
      - SENTRY_DSN=${SENTRY_DSN}
      - ENABLE_METRICS=true
      
      # Rate Limiting
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=100
      - RATE_LIMIT_WINDOW=60
    
    volumes:
      - agent_workspaces:/app/workspaces
      - project_data:/app/projects
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - sdlc_agents_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sdlc_agents
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--locale=C.UTF-8"
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sdlc_agents"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - sdlc_agents_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    
    volumes:
      - redis_data:/data
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    networks:
      - sdlc_agents_network

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sdlc_agents_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - sdlc_agents_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  agent_workspaces:
    driver: local
  project_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  sdlc_agents_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
