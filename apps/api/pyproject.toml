[tool.poetry]
name = "sdlc-agents-api"
version = "1.0.0"
description = "FastAPI backend for SDLC Agents system with advanced project lifecycle management"
authors = ["SDLC Team <team@sdlc-agents.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "0.115.12"
uvicorn = {extras = ["standard"], version = "0.24.0"}
python-multipart = "^0.0.9"
pydantic = {extras = ["email"], version = "^2.11.7"}
pydantic-settings = "^2.7.0"
sse-starlette = "3.0.2"
httpx = "^0.28.1"
loguru = "^0.7.2"
# Database dependencies
sqlmodel = "^0.0.14"
sqlalchemy-utils = "^0.41.1"
asyncpg = "^0.30.0"
alembic = "^1.13.1"
# Authentication dependencies
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
bcrypt = "4.0.1"
# CLI dependencies
click = "^8.1.0"
typer = {extras = ["all"], version = "0.8.0"}
# Template dependencies
jinja2 = "^3.1.2"
greenlet = "^3.2.4"
pyjwt = "^2.10.1"
python-dotenv = "^1.1.0"
# Monitoring and observability dependencies
sentry-sdk = "^2.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
black = "^23.0.0"
isort = "^5.12.0"
mypy = "^1.5.0"
ruff = "^0.1.0"
types-python-jose = "^3.5.0.20250531"
types-passlib = "^1.7.7.20250602"
aiosqlite = "^0.21.0"

[tool.poetry.group.test.dependencies]
pytest = "7.4.3"
pytest-cov = "^4.1.0"
pytest-asyncio = "^0.21.0"
httpx = "^0.28.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["app"]

[tool.ruff]
# Select rules to enable
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings  
    "F",     # Pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "RUF",   # Ruff-specific rules
]

# Rules to always ignore
ignore = [
    "E501",   # Line too long (handled by black)
    "B008",   # Do not perform function call in argument defaults (FastAPI pattern)
    "B904",   # Within `except` clause, raise exceptions with `raise ... from err` (not always needed)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

line-length = 120
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]  # Allow asserts in tests
"manage.py" = ["ALL"]  # Exclude manage.py from linting
"run_orchestrator.py" = ["ALL"]  # Exclude run_orchestrator.py from linting

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "manage"
ignore_errors = true

[[tool.mypy.overrides]]
module = "run_orchestrator"
ignore_errors = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*.py", "*/utils/logger.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
