"""initial_schema

Revision ID: f49b6762f82c
Revises: 
Create Date: 2025-09-07 21:17:57.211927

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = 'f49b6762f82c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('avatar_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('bio', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('organization', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timezone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('theme', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('github_username', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('slack_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('integrations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('integration_type', sa.Enum('GITHUB', 'GITLAB', 'BITBUCKET', 'JIRA', 'SLACK', 'DISCORD', 'TEAMS', 'JENKINS', 'DOCKER', 'AWS', 'GCP', 'AZURE', 'WEBHOOK', 'CUSTOM', name='integrationtype'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'ERROR', 'PENDING', 'EXPIRED', name='integrationstatus'), nullable=False),
    sa.Column('config', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('credentials', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('api_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('api_version', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('oauth_client_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('oauth_scopes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('oauth_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('oauth_refresh_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('oauth_expires_at', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('webhook_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('webhook_secret', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('webhook_events', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_health_check_at', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('health_check_status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('total_requests', sa.Integer(), nullable=False),
    sa.Column('failed_requests', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_integrations_name'), 'integrations', ['name'], unique=False)
    op.create_index(op.f('ix_integrations_slug'), 'integrations', ['slug'], unique=True)
    op.create_table('projects',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'ARCHIVED', 'COMPLETED', name='projectstatus'), nullable=False),
    sa.Column('project_type', sa.Enum('WEB_APP', 'MOBILE_APP', 'DESKTOP_APP', 'LIBRARY', 'API', 'MICROSERVICE', 'DATA_PIPELINE', 'ML_PROJECT', 'OTHER', name='projecttype'), nullable=False),
    sa.Column('repository_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('repository_branch', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('local_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tech_stack', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tags', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('environment_config', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('build_config', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('deployment_config', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('jira_project_key', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('slack_channel_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_projects_name'), 'projects', ['name'], unique=False)
    op.create_index(op.f('ix_projects_slug'), 'projects', ['slug'], unique=True)
    op.create_table('agents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('agent_type', sa.Enum('CODE_REVIEWER', 'TEST_GENERATOR', 'DOCUMENTATION_WRITER', 'BUG_HUNTER', 'PERFORMANCE_OPTIMIZER', 'SECURITY_SCANNER', 'DEPLOYMENT_MANAGER', 'MONITORING_AGENT', 'CUSTOM', name='agenttype'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PAUSED', 'ERROR', 'MAINTENANCE', name='agentstatus'), nullable=False),
    sa.Column('config', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('prompt_template', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('model_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('max_tokens', sa.Integer(), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('timeout_seconds', sa.Integer(), nullable=False),
    sa.Column('schedule_cron', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('trigger_events', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('total_executions', sa.Integer(), nullable=False),
    sa.Column('successful_executions', sa.Integer(), nullable=False),
    sa.Column('last_execution_at', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agents_name'), 'agents', ['name'], unique=False)
    op.create_index(op.f('ix_agents_slug'), 'agents', ['slug'], unique=True)
    op.create_table('workflows',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_by', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'PAUSED', 'ERROR', 'COMPLETED', name='workflowstatus'), nullable=False),
    sa.Column('trigger_type', sa.Enum('MANUAL', 'SCHEDULE', 'WEBHOOK', 'GIT_PUSH', 'GIT_PR', 'FILE_CHANGE', 'API_CALL', name='workflowtrigger'), nullable=False),
    sa.Column('trigger_config', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('steps', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('schedule_cron', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timezone', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('timeout_minutes', sa.Integer(), nullable=False),
    sa.Column('max_retries', sa.Integer(), nullable=False),
    sa.Column('parallel_execution', sa.Boolean(), nullable=False),
    sa.Column('total_runs', sa.Integer(), nullable=False),
    sa.Column('successful_runs', sa.Integer(), nullable=False),
    sa.Column('failed_runs', sa.Integer(), nullable=False),
    sa.Column('last_run_at', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_run_status', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('average_duration_seconds', sa.Float(), nullable=True),
    sa.Column('project_id', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflows_name'), 'workflows', ['name'], unique=False)
    op.create_index(op.f('ix_workflows_slug'), 'workflows', ['slug'], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workflows_slug'), table_name='workflows')
    op.drop_index(op.f('ix_workflows_name'), table_name='workflows')
    op.drop_table('workflows')
    op.drop_index(op.f('ix_agents_slug'), table_name='agents')
    op.drop_index(op.f('ix_agents_name'), table_name='agents')
    op.drop_table('agents')
    op.drop_index(op.f('ix_projects_slug'), table_name='projects')
    op.drop_index(op.f('ix_projects_name'), table_name='projects')
    op.drop_table('projects')
    op.drop_index(op.f('ix_integrations_slug'), table_name='integrations')
    op.drop_index(op.f('ix_integrations_name'), table_name='integrations')
    op.drop_table('integrations')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
